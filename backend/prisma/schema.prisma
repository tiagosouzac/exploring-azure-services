// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Schema para o sistema de chamados técnicos

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário: pode ser um cliente ou um atendente
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CLIENTE) // CLIENTE ou ATENDENTE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  tickets    Ticket[]     // Tickets criados pelo usuário
  messages   Message[]    // Mensagens enviadas pelo usuário

  @@map("users")
}

// Enum para os papéis de usuário
enum Role {
  CLIENTE
  ATENDENTE
}

// Modelo de Ticket (Chamado)
model Ticket {
  id          String    @id @default(uuid())
  title       String
  description String
  status      Status    @default(ABERTO)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  closedAt    DateTime? // Data em que o chamado foi fechado

  // Relações
  userId      String    // ID do cliente que abriu o chamado
  user        User      @relation(fields: [userId], references: [id])
  messages    Message[] // Mensagens deste chamado

  @@map("tickets")
}

// Enum para o status do chamado
enum Status {
  ABERTO
  CONCLUIDO
}

// Modelo de Mensagem
model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Relações
  userId    String   // Quem enviou a mensagem
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String   // Chamado ao qual a mensagem pertence
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  
  // Anexos relacionados à mensagem
  attachments Attachment[]

  @@map("messages")
}

// Modelo de Anexos
model Attachment {
  id        String   @id @default(uuid())
  filename  String   // Nome do arquivo original
  path      String   // Caminho onde o arquivo está armazenado
  mimetype  String   // Tipo do arquivo
  size      Int      // Tamanho do arquivo em bytes
  createdAt DateTime @default(now())

  // Relação com a mensagem
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachments")
}
